/**
 * useAutoUpdate.js - Hook para Atualiza√ß√£o Autom√°tica Agressiva
 * Personal Finance Flow V1.5.1 - Sistema de Atualiza√ß√£o Desktop
 * 
 * Funcionalidades:
 * - Verifica√ß√£o autom√°tica de atualiza√ß√µes no carregamento
 * - Logs detalhados para debugging
 * - Integra√ß√£o com VitePWA
 * - Verifica√ß√£o peri√≥dica em background
 * - Recarregamento autom√°tico for√ßado
 * 
 * Localiza√ß√£o: C:\Personal_Finance_Flow\src\hooks\useAutoUpdate.js
 * Vers√£o: 1.5.1 - Sistema de Atualiza√ß√£o Autom√°tica
 */

import { useEffect, useRef, useState } from 'react';

// Constantes de configura√ß√£o
const UPDATE_CHECK_INTERVAL = 5 * 60 * 1000; // 5 minutos
const MAX_RETRY_ATTEMPTS = 3;
const RETRY_DELAY = 2000; // 2 segundos

/**
 * Hook customizado para gerenciar atualiza√ß√µes autom√°ticas
 * Integra com VitePWA e for√ßa atualiza√ß√µes em desktop
 */
export const useAutoUpdate = () => {
  const [updateStatus, setUpdateStatus] = useState('checking');
  const [lastCheck, setLastCheck] = useState(null);
  const intervalRef = useRef(null);
  const retryCountRef = useRef(0);
  const swRegistrationRef = useRef(null);

  // Fun√ß√£o para logging detalhado
  const logUpdate = (type, message, data = null) => {
    const timestamp = new Date().toISOString();
    const logPrefix = `[PWA-UPDATE ${timestamp}]`;
    
    switch (type) {
      case 'info':
        console.log(`${logPrefix} ‚ÑπÔ∏è ${message}`, data || '');
        break;
      case 'success':
        console.log(`${logPrefix} ‚úÖ ${message}`, data || '');
        break;
      case 'warning':
        console.warn(`${logPrefix} ‚ö†Ô∏è ${message}`, data || '');
        break;
      case 'error':
        console.error(`${logPrefix} ‚ùå ${message}`, data || '');
        break;
      case 'debug':
        if (__PWA_DEBUG__) {
          console.debug(`${logPrefix} üîç ${message}`, data || '');
        }
        break;
    }
  };

  // Fun√ß√£o para detectar se estamos em ambiente de produ√ß√£o
  const isProduction = () => {
    return window.location.hostname !== 'localhost' && 
           window.location.hostname !== '127.0.0.1' &&
           !window.location.port;
  };

  // Fun√ß√£o para verificar disponibilidade do Service Worker
  const checkServiceWorkerSupport = () => {
    if (!('serviceWorker' in navigator)) {
      logUpdate('warning', 'Service Worker n√£o suportado pelo navegador');
      return false;
    }
    return true;
  };

  // Fun√ß√£o para obter registro atual do Service Worker
  const getCurrentRegistration = async () => {
    try {
      const registrations = await navigator.serviceWorker.getRegistrations();
      logUpdate('debug', `Encontrados ${registrations.length} registrations`, registrations.map(r => r.scope));
      
      if (registrations.length > 0) {
        // Priorizar registration do VitePWA se existir
        const viteRegistration = registrations.find(reg => 
          reg.scope.includes('/personal-finance-flow/') || 
          reg.scope === window.location.origin + '/'
        );
        
        return viteRegistration || registrations[0];
      }
      
      return null;
    } catch (error) {
      logUpdate('error', 'Erro ao obter registrations', error);
      return null;
    }
  };

  // Fun√ß√£o para for√ßar verifica√ß√£o de atualiza√ß√£o
  const forceUpdateCheck = async () => {
    if (!isProduction()) {
      logUpdate('info', 'Verifica√ß√£o de atualiza√ß√£o pulada - ambiente de desenvolvimento');
      setUpdateStatus('dev-mode');
      return;
    }

    if (!checkServiceWorkerSupport()) {
      setUpdateStatus('unsupported');
      return;
    }

    try {
      logUpdate('info', 'Iniciando verifica√ß√£o for√ßada de atualiza√ß√£o...');
      setUpdateStatus('checking');

      const registration = await getCurrentRegistration();
      
      if (!registration) {
        logUpdate('warning', 'Nenhum Service Worker encontrado');
        setUpdateStatus('no-sw');
        return;
      }

      swRegistrationRef.current = registration;
      logUpdate('info', `Service Worker encontrado: ${registration.scope}`);

      // For√ßar verifica√ß√£o de atualiza√ß√£o
      await registration.update();
      logUpdate('success', 'Verifica√ß√£o de atualiza√ß√£o executada');

      // Verificar se h√° nova vers√£o aguardando
      if (registration.waiting) {
        logUpdate('success', 'Nova vers√£o detectada! Aplicando atualiza√ß√£o...');
        await applyUpdate(registration.waiting);
      } else if (registration.installing) {
        logUpdate('info', 'Nova vers√£o sendo instalada...');
        setUpdateStatus('installing');
        
        // Aguardar instala√ß√£o completar
        registration.installing.addEventListener('statechange', () => {
          if (registration.installing.state === 'installed') {
            logUpdate('success', 'Nova vers√£o instalada! Aplicando...');
            applyUpdate(registration.installing);
          }
        });
      } else {
        logUpdate('info', 'Aplica√ß√£o j√° est√° na vers√£o mais recente');
        setUpdateStatus('up-to-date');
      }

      setLastCheck(new Date());
      retryCountRef.current = 0; // Reset retry counter on success

    } catch (error) {
      logUpdate('error', 'Erro durante verifica√ß√£o de atualiza√ß√£o', error);
      setUpdateStatus('error');
      
      // Implementar retry logic
      if (retryCountRef.current < MAX_RETRY_ATTEMPTS) {
        retryCountRef.current++;
        logUpdate('info', `Tentando novamente em ${RETRY_DELAY/1000}s (tentativa ${retryCountRef.current}/${MAX_RETRY_ATTEMPTS})`);
        
        setTimeout(() => {
          forceUpdateCheck();
        }, RETRY_DELAY);
      } else {
        logUpdate('error', 'M√°ximo de tentativas atingido para verifica√ß√£o de atualiza√ß√£o');
      }
    }
  };

  // Fun√ß√£o para aplicar atualiza√ß√£o for√ßada
  const applyUpdate = async (serviceWorker) => {
    try {
      logUpdate('info', 'Aplicando atualiza√ß√£o e recarregando aplica√ß√£o...');
      setUpdateStatus('updating');

      // Postar mensagem para Service Worker para aplicar atualiza√ß√£o
      if (serviceWorker) {
        serviceWorker.postMessage({ type: 'SKIP_WAITING' });
      }

      // Aguardar um momento para o SW processar
      await new Promise(resolve => setTimeout(resolve, 1000));

      // For√ßar recarregamento completo da p√°gina
      logUpdate('success', 'Recarregando aplica√ß√£o com nova vers√£o...');
      window.location.reload();

    } catch (error) {
      logUpdate('error', 'Erro ao aplicar atualiza√ß√£o', error);
      setUpdateStatus('error');
      
      // Fallback: recarregamento hard
      logUpdate('info', 'Tentando recarregamento for√ßado...');
      window.location.href = window.location.href;
    }
  };

  // Fun√ß√£o para configurar verifica√ß√£o peri√≥dica
  const setupPeriodicCheck = () => {
    if (!isProduction()) {
      return;
    }

    // Limpar interval anterior se existir
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }

    // Configurar novo interval
    intervalRef.current = setInterval(() => {
      logUpdate('info', 'Executando verifica√ß√£o peri√≥dica de atualiza√ß√£o...');
      forceUpdateCheck();
    }, UPDATE_CHECK_INTERVAL);

    logUpdate('info', `Verifica√ß√£o peri√≥dica configurada: a cada ${UPDATE_CHECK_INTERVAL/60000} minutos`);
  };

  // Fun√ß√£o para configurar listeners de Service Worker
  const setupServiceWorkerListeners = async () => {
    if (!checkServiceWorkerSupport() || !isProduction()) {
      return;
    }

    try {
      // Listener para controllerchange (nova vers√£o ativa)
      navigator.serviceWorker.addEventListener('controllerchange', () => {
        logUpdate('success', 'Nova vers√£o do Service Worker ativa - recarregando...');
        window.location.reload();
      });

      // Listener para messages do Service Worker
      navigator.serviceWorker.addEventListener('message', (event) => {
        logUpdate('debug', 'Mensagem recebida do Service Worker', event.data);
        
        if (event.data && event.data.type === 'UPDATE_AVAILABLE') {
          logUpdate('info', 'Atualiza√ß√£o dispon√≠vel notificada pelo SW');
          forceUpdateCheck();
        }
      });

      logUpdate('info', 'Listeners do Service Worker configurados');

    } catch (error) {
      logUpdate('error', 'Erro ao configurar listeners do Service Worker', error);
    }
  };

  // Effect principal - executa na inicializa√ß√£o
  useEffect(() => {
    logUpdate('info', `Inicializando sistema de atualiza√ß√£o autom√°tica v${__APP_VERSION__}`);
    logUpdate('info', `Build: ${__BUILD_DATE__}`);
    logUpdate('info', `Ambiente: ${isProduction() ? 'PRODU√á√ÉO' : 'DESENVOLVIMENTO'}`);
    
    // Verifica√ß√£o inicial ap√≥s pequeno delay
    const initialCheckTimer = setTimeout(() => {
      forceUpdateCheck();
    }, 2000);

    // Configurar listeners e verifica√ß√£o peri√≥dica
    setupServiceWorkerListeners();
    setupPeriodicCheck();

    // Cleanup
    return () => {
      clearTimeout(initialCheckTimer);
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      logUpdate('info', 'Sistema de atualiza√ß√£o autom√°tica finalizado');
    };
  }, []); // Executa apenas uma vez

  // Fun√ß√£o manual para verificar atualiza√ß√µes (para debugging)
  const manualUpdateCheck = () => {
    logUpdate('info', 'Verifica√ß√£o manual de atualiza√ß√£o solicitada');
    forceUpdateCheck();
  };

  // Retornar estado e fun√ß√µes para debugging
  return {
    updateStatus,
    lastCheck,
    manualUpdateCheck,
    isProduction: isProduction(),
    supportsServiceWorker: checkServiceWorkerSupport()
  };
};